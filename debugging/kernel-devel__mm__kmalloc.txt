malloc and memory management


REFERENCES
https://www.linuxjournal.com/article/6930   (old)
https://notes.eddyerburgh.me/operating-systems/linux/memory-management
https://www.kernel.org/doc/html/latest/kernel-hacking/locking.html





TLDR

- vmalloc(): preferable, is the same as kmalloc, except that it
  allocates memory that is only virtually contiguous. The underlying
  physical memory can be discontiguous

- kmalloc(): allocates memory via get free pages, it can gather
  several small allocations in one page, it cannot allocate high
  memory (old?)

- kzalloc(): zeroes the memory before returning a pointer

- kcmalloc(): allocates memory for an array, it is not a replacement
  for kmalloc void *kcalloc(size_t n, size_t size, gfp_t flags)

- alloc_pages.c: alloc page functions can allocate high memory (old?)
  and are used to allocate larger amounts of memory than kmalloc()





ALLOCATION

Why allocating memory? - A Small Fixed-Size Stack!

Unlike user-space processes, code executing in the kernel has neither
a large nor a dynamically growing stack. Instead, each process in the
kernel has a small fixed-size stack. The exact size of the stack is
architecture-dependent. Most architectures allocate two pages for the
stack, so the stack is 8KB on 32-bit machines.

    #define BUF_LEN 2048

    void rabbit_function(void)
    {
        char buf[BUF_LEN];
        /* ...  */
    }


...instead, the following is preferred...


    #define BUF_LEN        2048

    void rabbit_function(void)
    {
        char *buf;

        buf = kmalloc(BUF_LEN, GFP_KERNEL);
        if (!buf)
            /* error! */

        /* ... */
    }



A number of (old?) factors contribute to the complication, among them:
- The kernel is limited to about 1GB of virtual and physical memory
  (32-bit Linux, address limitation, on 64-bit Linux not an issue)

- The kernel's memory is not pageable.

- The kernel usually wants physically contiguous memory.

- Often, the kernel must allocate the memory without sleeping.

- Mistakes in the kernel have a much higher price than they do
  elsewhere.





ALLOCATION FROM PHYSICAL MEMORY

The kmalloc() function returns physically and therefore virtually
contiguous memory. Physically contiguous memory has two primary
benefits. First, many hardware devices cannot address virtual
memory. Therefore, in order for them to be able to access a block of
memory, the block must exist as a physically contiguous chunk of
memory. Second, a physically contiguous block of memory can use a
single large page mapping. This minimizes the translation lookaside
buffer (TLB) overhead of addressing the memory, as only a single TLB
entry is required.

As with malloc(), kmalloc() can fail, and you must check its return
value against NULL. Let's look at an example:

example
    struct sausage *s;

    s = kmalloc(sizeof (struct sausage), GFP_KERNEL);
    if (!s)
        return -ENOMEM;

    /* ... */

    kfree(s);





FLAGS

We can divide flags into three groups: action modifiers, zone
modifiers and types.

- Action modifiers, tell the kernel how to allocate memory. They
  specify, for example, whether the kernel can sleep (that is, whether
  the call to kmalloc() can block)

    Flag            Description
    ------------------------------------------------------------------
    __GFP_COLD      The kernel should use cache cold pages.
    __GFP_FS        The kernel can start filesystem I/O.
    __GFP_HIGH      The kernel can access emergency pools.
    __GFP_IO        The kernel can start disk I/O.
    __GFP_NOFAIL    The kernel can repeat the allocation.
    __GFP_NORETRY   The kernel does not retry if the allocation fails.
    __GFP_NOWARN    The kernel does not print failure warnings.
    __GFP_REPEAT    The kernel repeats the allocation if it fails.
    __GFP_WAIT      The kernel can sleep.


- Zone modifiers, on the other hand, tell the kernel from where the request
  should be satisfied. For example, some requests may need to be satisfied
  from memory that hardware can access through direct memory access (DMA).
    Flag            Description
    ------------------------------------------------------------------
    __GFP_DMA       Allocate only DMA-capable memory.
    No flag         Allocate from wherever available.


- The two most common flags are GFP_ATOMIC and GFP_KERNEL. Nearly all
  of your kernel memory allocations should specify one of these two
  flags.

    Flag            Description                             Value
    ----------------------------------------------------------------------------
    GFP_ATOMIC      The allocation is high-priority and     __GFP_HIGH
                    does not sleep. This is the flag to
                    use in interrupt handlers, bottom
                    halves and other situations where
                    you cannot sleep.

    GFP_DMA         This is an allocation of DMA-capable    __GFP_DMA
                    memory. Device drivers that need
                    DMA-capable memory use this flag.

    GFP_KERNEL      This is a normal allocation and might   (__GFP_WAIT | __GFP_IO | __GFP_FS)
                    block. This is the flag to use in
                    process context code when it is safe
                    to sleep.

    GFP_NOFS        This allocation might block and might   (__GFP_WAIT | __GFP_IO)
                    initiate disk I/O, but it does not
                    initiate a filesystem operation. This
                    is the flag to use in filesystem code
                    when you cannot start another
                    filesystem operation.

    GFP_NOIO        This allocation might block, but it     __GFP_WAIT
                    does not initiate block I/O. This is
                    the flag to use in block layer code
                    when you cannot start more block I/O.

    GFP_USER        This is a normal allocation and might   (__GFP_WAIT | __GFP_IO | __GFP_FS)
                    block. This flag is used to allocate
                    memory for user-space processes.



GFP_ATOMIC

The GFP_ATOMIC flag instructs the memory allocator never to block. Use
this flag in situations where it cannot sleep - where it must remain
atomic - such as interrupt handlers, bottom halves and process context
code that is holding a lock. An allocation specifying GFP_ATOMIC has a
lesser chance of succeeding.



GFP_KERNEL

The GFP_KERNEL flag specifies a normal kernel allocation. Use this
flag in code executing in process context without any locks. A call to
kmalloc() with this flag can sleep; thus, you must use this flag only
when it is safe to do so.  Therefore, allocations that specify this
flag have a greater chance of succeeding.



You can combine flags with a binary OR operation. For example, to
instruct the kernel to allocate DMA-capable memory and to sleep if
needed, do:

    char *buf;
    /* we want DMA-capable memory,
     * and we can sleep if needed
     */
    buf = kmalloc(BUF_LEN, GFP_DMA | GFP_KERNEL);
    if (!buf)
        /* error */






RETURN MEMORY

As with free() in user space, calling kfree() on a block of memory
that already has been freed or on a pointer that is not an address
returned from kmalloc() is a bug, and it can result in memory
corruption.





ALLOCATION FROM VIRTUAL MEMORY

Allocating physically contiguous memory has one downside: it is often
hard to find physically contiguous blocks of memory, especially for
large allocations. Allocating memory that is only virtually contiguous
has a much larger chance of success. If you do not need physically
contiguous memory, use vmalloc()

    struct black_bear *p;

    p = vmalloc(sizeof (struct black_bear));
    if (!p)
        /* error */

    /* ... */

    vfree(p);

Many allocations in the kernel can use vmalloc(), because few
allocations need to appear contiguous to hardware devices. If you are
allocating memory that only software accesses, such as data associated
with a user process, there is no need for the memory to be physically
contiguous.
