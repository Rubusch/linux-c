kernel panic debugging via System.map (kernel sources)

RESOURCES

https://sanjeev1sharma.wordpress.com/tag/debug-kernel-panics/



NOTE

objdump: is a program for displaying various information about object files;
for instance, it can be used as a disassembler to view executable in assembly
form

vmlinux: is a statically linked executable file that contains the Linux kernel
in one of the object file formats supported by Linux, The vmlinux file might be
required for kernel debugging, symbol table generation or other operations



EXAMPLE

    67.994406] Unable to handle kernel paging request at virtual address 02120bc4
    [   67.994495] pgd = 94240000
    [   67.994553] [02120bc4] *pgd=00000000
    [   67.994624] Internal error: Oops: 5 [#1] PREEMPT SMP ARM
    [   67.994926] CPU: 0    Not tainted  (3.8.13.23-XXXXXXXX #1)
    [   67.994996] PC is at add_range+0x14/0x6c
    [   67.995056] LR is at XXXXXXX+0x38/0x44
    [   67.995117] pc : [<80049F3C>]    lr : [<8004a1ec>]    psr: 20000013
    [   67.995117] sp : 9423fd90  ip : 9423fda8  fp : 9423fda4
    [   67.995176] r10: 00000000  r9 : 9423ff60  r8 : 8000da84
    [   67.995233] r7 : 000041fd  r6 : 00000081  r5 : aa068088  r4 : aa068088
    [   67.995290] r3 : ac8ceb80  r2 : 021ab618  r1 : 00000000  r0 : 02120bc0
    [   67.995348] Flags: nzCv  IRQs on  FIQs on  Mode SVC_32  ISA ARM  Segment user
    [   67.995406] Control: 10c5387d  Table: 2424004a  DAC: 00000015
    [   67.995462] Process cat (pid: 1352, stack limit = 0x9423e238)
    [   67.995518] Stack: (0x9423fd90 to 0x94240000)
    [   67.995577] fd80:                                     aa068088 aa068088 9423fdb4 9423fda8


crash occurs here
    PC is at add_range +0x14/0x6c

grep/find add_range() in System.map file and note down symbol name address
i.e. 80049f28
$ grep add_range System.map
    80049f28 T add_range

replace add_range symbol name address by "add_range+0x14"
i.e. where 80049f28 + 0x14 = 80049F3C
80049F3C should be same as PC Address in the Back trace

run objdump on vmlinux to get the disassembly and detail on objdump program and
vmlinux can be fetched from below hyperlinks

find "add_range" in file vmlinux.objdump and look for PC address calculated
above e.g. 80049F3C
$ objdump -D -S --show-raw-insn --prefix-addresses --line-numbers vmlinux > vmlinux.objdump
    80049F3C <add_Range+0x14> e5903004  ldr     r3, [r0, #4]

the crash point can be identified here
    ldr     r3, [r0, #4] = r0+4 = 02120bc0+4 = 02120bc4

replace r0 with r0 register value from the Back Traces, this is same as fault
address:
    Unable to handle kernel paging request at virtual address 02120bc4



CONCLUSION

here r0 is pointing to invalid address and from disassembly found out where r0
is pointing and found out why r0 is pointing to invalid address
